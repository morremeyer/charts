# -- number of replicas
replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: "1.23.1"

restartPolicy: Always

deploymentStrategy: {}

initContainers: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true

  # -- Annotations to add to the service account
  annotations: {}

  # -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

# -- Set to true to enable host networking
hostNetwork: false

command: ~

args: ~

# -- Directly set environment variables
env: []

# -- Set environment variables from configMaps or Secrets
envValueFrom: {}

additionalVolumeMounts: []

additionalVolumes: []

labels: {}

annotations: {}

configMap:
  # -- If a ConfigMap with configurable values should be created
  enabled: false

  # -- The data for the ConfigMap. Both keys and values need to be strings.
  data: {}

  # -- If specified, the ConfigMap is mounted as a directory at this path
  mountPath: ""

  # -- Mounting of individual keys in the ConfigMap as files
  mountFiles: []
    # - subPath: "config.yml"
    #   mountPath: /app/config.yml

persistence:
  enabled: false
  # -- Annotations to add to the PersistentVolumeClaim
  annotations: {}
    # helm.sh/resource-policy: keep
  # -- Where the persistent volume is mounted
  mountPath: /data
  storage: 100Mi
  # -- Set a storageClassName, otherwise the default class is used.
  storageClassName: ~

ports:
  - name: http
    containerPort: 80
    protocol: TCP

livenessProbe:
  httpGet:
    path: /
    port: http

readinessProbe:
  httpGet:
    path: /
    port: http

# -- Configure a startup probe for the pod
startupProbe: ~

service:
  type: ClusterIP
  annotations: {}

  # -- DEPRECATED: Use service.ports[*].targetPort. Target port on the pod. Ignored if service.ports is specified.
  targetPort: http
  # -- DEPRECATED: Use service.ports[*].protocol. Protocol to use for the target port. Ignored if service.ports is specified.
  protocol: TCP
  # -- DEPRECATED: Use service.ports[*].name. Name of the port on the service. Ignored if service.ports is specified.
  name: http
  # -- DEPRECATED: Use service.ports[*].port. Port to use on the service. Ignored if service.ports is specified.
  port: 80

  # -- List of ports. If you override it, you will have to explicitly add the default again.
  ports: []  # TODO: Add default port and documentation.
    # - targetPort: http
    #   protocol: TCP
    #   name: http
    #   port: 80

  # Only for type ClusterIP
  ip: ~

  ## -- Only for type LoadBalancer
  loadBalancerIP: ~

ingress:
  ## -- Enable or disable this Ingress
  enabled: false

  # -- The ingressClassName for this Ingress resource
  className: ~
  annotations: {}

  hosts:
    - host: chart-example.local
      paths:
        - path: /
          backend:
            serviceName: chart-example.local
            servicePort: 80
  tls: []

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

serviceMonitors:
    # -- If a ServiceMonitor should be deployed. Needs the CRD installed
  - enabled: false
    # -- Name of the resource, defaults to the release name
    name: ""
    # -- Additional labels for the ServiceMonitor resource
    additionalLabels: {}
    # -- How often to scrape
    interval: 1m
    # -- Timeout for scraping
    scrapeTimeout: 10s
    # -- The port to scrape
    port: http
    # -- The path of the metrics endpoint
    path: /metrics
    # -- The label 'job' in prometheus. Defaults to the release name
    jobLabel: ""

nodeSelector: {}

tolerations: []

affinity: {}
